{"version":3,"file":"static/js/969.13fd1abf.chunk.js","mappings":"8JAMA,IAJe,SAAC,GAAiC,IAAhCA,EAA+B,EAA/BA,SAA+B,IAArBC,KAAAA,OAAqB,MAAd,SAAc,EAC9C,OAAO,mBAAQC,UAAWC,EAAAA,EAAAA,OAAYF,KAAMA,EAArC,SAA4CD,GACpD,C,mGCHD,EAA6D,yBAA7D,EAA8F,yB,oCCe9F,EAXkB,SAAC,GAAqC,IAApCI,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAiBC,GAAW,YAC/CC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEnC,OACE,4BACE,kBAAOP,UAAWC,EAAWO,QAASH,EAAtC,SAA4CH,KAC5C,0BAAOF,UAAWC,EAAYI,GAAIA,EAAII,SAAUN,GAAkBC,MAGvE,C,mECQD,IApBgB,SAAC,GAAkC,IAAjCM,EAAgC,EAAhCA,iBAAkBC,EAAc,EAAdA,SAClC,GAA0BC,EAAAA,EAAAA,WAAS,UAAIF,IAAvC,eAAOG,EAAP,KAAcC,EAAd,KAEMX,GAAeY,EAAAA,EAAAA,cAAY,YAAe,IAAbC,EAAY,EAAZA,OAC1BC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MACbJ,GAAS,SAAAK,GACT,OAAO,kBAAIA,GAAX,cAAuBF,EAAOC,GAC3B,GACJ,GAAE,CAACJ,IASJ,MAAO,CAACD,MAAAA,EAAOC,SAAAA,EAAUX,aAAAA,EAAciB,aAPlB,SAACC,GACpBA,EAAEC,iBAEFX,GAAS,UAAIE,IACbC,GAAS,UAAIJ,GACd,EAGF,C,4FCdD,EANyB,CACvBO,KAAM,GACNM,MAAO,GACPC,SAAU,I,uCCqBZ,EAjBqB,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SACtB,GAA8Cc,EAAAA,EAAAA,GAAQ,CACpDf,iBAAAA,EACAC,SAAAA,IAFME,EAAR,EAAQA,MAAOV,EAAf,EAAeA,aAAciB,EAA7B,EAA6BA,aAKtBH,EAAyBJ,EAAzBI,KAAMM,EAAmBV,EAAnBU,MAAOC,EAAYX,EAAZW,SAEpB,OACE,kBAAMb,SAAUS,EAAcpB,UAAWC,EAAAA,EAAAA,KAAzC,WACE,SAACyB,EAAA,EAAD,CAAWR,MAAOD,EAAMR,SAAUN,EAAcJ,KAAK,OAAO4B,UAAQ,EAACV,KAAK,OAAOf,MAAM,OAAO0B,YAAY,UAC1G,SAACF,EAAA,EAAD,CAAWR,MAAOK,EAAOd,SAAUN,EAAcJ,KAAK,QAAQ4B,UAAQ,EAACV,KAAK,QAAQf,MAAM,QAAQ0B,YAAY,WAC9G,SAACF,EAAA,EAAD,CAAWR,MAAOM,EAAUf,SAAUN,EAAcJ,KAAK,WAAW4B,UAAQ,EAACV,KAAK,WAAWf,MAAM,WAAW0B,YAAY,cAC1H,SAACC,EAAA,EAAD,CAAS9B,KAAK,SAAd,wBAGL,E,UCND,EAZqB,WACnB,IAAM+B,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,EAAD,CAAcpB,SALK,SAACqB,GACpBF,GAASG,EAAAA,EAAAA,IAAOD,GACjB,GAKF,C,qBCdD,KAAgB,KAAO,oBAAoB,OAAS,sB,wDCA7C,IAkBIzB,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACjC,EAAIkC,GAWvD,OARElC,IAFFkC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Button/Button.jsx","webpack://react-homework-template/./src/components/TextField/textFiled.module.css?7073","components/TextField/TextField.jsx","hooks/useForm.js","components/Forms/RegisterForm/initialStateForm.js","components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage/Register.jsx","webpack://react-homework-template/./src/components/Forms/Forms.module.css?29d0","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import css from \"../Forms/Forms.module.css\"\n\nconst Button = ({children, type = 'submit'}) => {\n  return <button className={css.button} type={type}>{children}</button>\n}\n\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"textFiled_wrapper__49MaO\",\"label\":\"textFiled_label__Qxv4T\",\"input\":\"textFiled_input__RbV1Y\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport css from './textFiled.module.css'\n\nconst TextField = ({label, handleChange, ...props}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div >\n      <label className={css.label} htmlFor={id} >{label}</label>\n      <input className={css.input}  id={id} onChange={handleChange} {...props}  />\n    </div>\n  )\n}\n\nexport default TextField;","import { useState, useCallback } from \"react\";\n\nconst useForm = ({initialStateForm, onSubmit}) => {\n  const [state, setState] = useState({...initialStateForm});\n\n  const handleChange = useCallback(({target}) => {\n    const {name, value} = target;\n    setState(prevState => {\n    return {...prevState, [name]: value}\n      })\n  }, [setState])\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    onSubmit({...state});\n    setState({...initialStateForm})\n  }\n\n  return {state, setState, handleChange, handleSubmit};\n}\n\nexport default useForm;","const initialStateForm = {\n  name: '',\n  email: '',\n  password: ''\n}\n\nexport default initialStateForm;","\nimport useForm from 'hooks/useForm';\nimport initialStateForm from './initialStateForm';\nimport TextField from '../../TextField/TextField';\nimport Button from '../../Button/Button';\nimport css from \"../Forms.module.css\"\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialStateForm,\n    onSubmit,\n  });\n\n  const {name, email, password} = state;\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form} >\n      <TextField value={name} onChange={handleChange} type='text' required name='name' label='Name' placeholder='Name'/>\n      <TextField value={email} onChange={handleChange} type='email' required name='email' label='Email' placeholder='Email'/>\n      <TextField value={password} onChange={handleChange} type='password' required name='password' label='Password' placeholder='Password' />\n      <Button  type='submit' >Register</Button>\n    </form>\n  );\n};\nexport default RegisterForm;\n","import { useDispatch } from \"react-redux\";\nimport RegisterForm from \"components/Forms/RegisterForm/RegisterForm\";\n\nimport { signup } from \"redux/auth/auth-operations\";\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = (data) => {\n    dispatch(signup(data))\n  }\n\n  return (\n    <RegisterForm onSubmit={handleSignup}/>\n  )\n}\n\nexport default RegisterPage;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Forms_form__WyCGc\",\"button\":\"Forms_button__oGsL+\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["children","type","className","css","label","handleChange","props","id","useMemo","nanoid","htmlFor","onChange","initialStateForm","onSubmit","useState","state","setState","useCallback","target","name","value","prevState","handleSubmit","e","preventDefault","email","password","useForm","TextField","required","placeholder","Button","dispatch","useDispatch","data","signup","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}